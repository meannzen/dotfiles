[[language]]
name = "rust"
auto-format = false

[language-server.rust-analyzer]
command = "rust-analyzer"
#formatter = { command = "cargo", args = [ "fmt"] }
#auto-format = true

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true


[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
 formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
#formatter = { command = "dprint", args = ["fmt", "--stdin", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "tsx"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "javascript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "jsx"] }
auto-format = true

[[language]]
name = "json"
# formatter = { command = "prettier", args = [ "--parser", "json" ] }
language-servers = [ "vscode-json-language-server" ]
auto-format = true

 [[language]]
name = "html"
language-servers = ["vscode-html-language-server", "emmet-ls"]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true
     
[[language]]
name = "css"
language-id = "css"
scope = "source.css"
file-types = ["css"]
language-servers = [ "vscode-css-language-server","tailwindcss-ls", "scls"]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

[language-server.tailwindcss-ls]
# command = "tailwindcss-language-server"
# args = [ "--stdio" ]
config = {userLanguages = { templ = "html", "*.templ" = "html" } }

[[language]]
name = "c-sharp"
language-servers = ["omnisharp"]

[language-server.omnisharp]
command = "dotnet"
args = ["/Users/macbook/.local/bin/omnisharp/OmniSharp.dll", "-lsp"]
